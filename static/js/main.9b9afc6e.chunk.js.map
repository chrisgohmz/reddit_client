{"version":3,"sources":["api/redditAPI.js","store/redditSlice.js","features/Avatar/Avatar.js","features/Comments/Comments.js","components/Card/Card.js","utils/shortenNumber.js","features/Post/Post.js","utils/getRandomNumber.js","features/Post/PostLoading.js","features/Home/Home.js","features/Header/Header.js","features/Subreddits/Subreddits.js","App.js","store/store.js","serviceWorker.js","index.js"],"names":["global","globalThis","fetch","redditApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getSubreddits","query","transformResponse","response","data","children","map","post","getPosts","subreddit","showingComments","getComments","permalink","useGetSubredditsQuery","useGetPostsQuery","useGetCommentsQuery","redditSlice","createSlice","name","initialState","posts","searchTerm","currentSubreddit","reducers","setPosts","state","action","payload","setSearchTerm","setCurrentSubreddit","toggleShowingComments","selectSearchTerm","reddit","selectCurrentSubreddit","actions","Avatar","src","alt","className","Comments","error","isLoading","comment","author","moment","unix","created_utc","fromNow","body","Card","props","shortenNumber","num","digits","units","i","length","decimal","toFixed","Post","index","useState","voteValue","setVoteValue","useSelector","dispatch","useDispatch","handleVote","newValue","type","onClick","ups","title","url","onToggleComments","num_comments","id","getRandomNumber","min","max","Math","floor","random","PostLoading","width","height","Home","animation","Array","fill","filteredPosts","filter","toLowerCase","includes","Header","searchTermLocal","setSearchTermLocal","useEffect","onSearchTermSubmit","e","preventDefault","onSubmit","placeholder","value","onChange","target","Subreddits","icon_img","display_name","style","border","primary_color","App","store","configureStore","reducer","redditReducer","middleware","getDefaultMiddleware","concat","setupListeners","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b9afc6e.chunk.js","sourcesContent":["import {createApi, fetchBaseQuery} from '@reduxjs/toolkit/query/react';\r\nimport fetch from 'node-fetch';\r\n\r\nif(!global.globalThis.fetch) {\r\n    global.globalThis.fetch = fetch;\r\n};\r\n\r\nexport const redditApi = createApi({\r\n    reducerPath: 'redditApi',\r\n    baseQuery: fetchBaseQuery({baseUrl: 'https://www.reddit.com'}),\r\n    endpoints: (builder) => ({\r\n        getSubreddits: builder.query({\r\n            query: () => '/subreddits.json',\r\n            transformResponse: response => response.data.children.map(post => post.data)\r\n        }),\r\n        getPosts: builder.query({\r\n            query: (subreddit) => `${subreddit}.json`,\r\n            transformResponse: response => response.data.children.map(subreddit => ({...subreddit.data, showingComments: false}))\r\n        }),\r\n        getComments: builder.query({\r\n            query: (permalink) => `${permalink}.json`,\r\n            transformResponse: response => response[1].data.children.map(subreddit => subreddit.data)\r\n        })\r\n    })\r\n});\r\n\r\nexport const {useGetSubredditsQuery, useGetPostsQuery, useGetCommentsQuery} = redditApi;","import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst redditSlice = createSlice({\r\n    name: 'reddit',\r\n    initialState: {\r\n        posts: [],\r\n        searchTerm: '',\r\n        currentSubreddit: '/r/Home'\r\n    },\r\n    reducers: {\r\n        setPosts: (state, action) => {\r\n            state.posts = action.payload;\r\n        },\r\n        setSearchTerm: (state, action) => {\r\n            state.searchTerm = action.payload;\r\n        },\r\n        setCurrentSubreddit: (state, action) => {\r\n            state.currentSubreddit = action.payload;\r\n            state.searchTerm = '';\r\n        },\r\n        toggleShowingComments: (state, action) => {\r\n            state.posts[action.payload].showingComments = !state.posts[action.payload].showingComments;\r\n        }\r\n    }\r\n});\r\n\r\nexport const selectSearchTerm = state => state.reddit.searchTerm;\r\nexport const selectCurrentSubreddit = state => state.reddit.currentSubreddit;\r\n\r\nexport const {setPosts, setSearchTerm, setCurrentSubreddit, toggleShowingComments} = redditSlice.actions;\r\nexport default redditSlice.reducer;","import React from 'react';\r\nimport './Avatar.css';\r\n\r\nconst Avatar = ({name}) => {\r\n    return (\r\n        <img\r\n        src={`https://api.adorable.io/avatars/10/${name}`}\r\n        alt={`${name} profile`}\r\n        className=\"avatar-profile-image\"\r\n        ></img>\r\n    );\r\n};\r\n\r\nexport default Avatar;","import React from 'react';\r\nimport moment from 'moment';\r\nimport './Comments.css';\r\nimport Avatar from '../Avatar/Avatar';\r\nimport {useGetCommentsQuery} from '../../api/redditAPI';\r\nimport Skeleton from 'react-loading-skeleton';\r\n\r\nconst Comments = ({permalink}) => {\r\n  const {data, error, isLoading} = useGetCommentsQuery(permalink);\r\n\r\n  if (error) {\r\n    return (\r\n      <div>\r\n        <h3>Error loading comments</h3>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div>\r\n        <Skeleton />\r\n        <Skeleton />\r\n        <Skeleton />\r\n        <Skeleton />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (data.map(comment => (\r\n  <div className=\"comment\">\r\n    <div className=\"comment-metadata\">\r\n      <Avatar name={comment.author} />\r\n      <p className=\"comment-author\">{comment.author}</p>\r\n      <p className=\"comment-created-time\">\r\n        {moment.unix(comment.created_utc).fromNow()}\r\n      </p>\r\n    </div>\r\n    {comment.body}\r\n  </div>)\r\n  ));\r\n};\r\n\r\nexport default Comments;","import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = (props) => {\r\n    return <div className={`card ${props.className}`}>{props.children}</div>\r\n};\r\n\r\nexport default Card;","/**\r\n * Shorten number to thousands, millions, billions, etc.\r\n * Source: https://stackoverflow.com/questions/9461621/format-a-number-as-2-5k-if-a-thousand-or-more-otherwise-900\r\n * @param {number} num Number to shorten\r\n * @param {number} digits The number of digits to appear after the decimal point.\r\n */\r\n const shortenNumber = (num, digits) => {\r\n    const units = ['k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\r\n  \r\n    for (let i = units.length - 1; i >= 0; i -= 1) {\r\n      const decimal = 1000 ** (i + 1);\r\n  \r\n      if (num <= -decimal || num >= decimal) {\r\n        return +(num / decimal).toFixed(digits) + units[i];\r\n      }\r\n    }\r\n  \r\n    return num;\r\n  };\r\n  \r\n  export default shortenNumber;","import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {TiArrowUpOutline, TiArrowDownOutline, TiArrowUpThick, TiArrowDownThick, TiMessage} from 'react-icons/ti';\r\nimport Comments from '../Comments/Comments';\r\nimport Card from '../../components/Card/Card';\r\nimport moment from 'moment';\r\nimport Avatar from '../Avatar/Avatar';\r\nimport {toggleShowingComments} from '../../store/redditSlice.js';\r\nimport shortenNumber from '../../utils/shortenNumber';\r\nimport './Post.css';\r\n\r\nconst Post = ({post, index}) => {\r\n\r\n    const [voteValue, setVoteValue] = useState(0);\r\n    const showingComments = useSelector(state => state.reddit.posts[index].showingComments);\r\n    const dispatch = useDispatch();\r\n\r\n    const onToggleComments = index => {\r\n      dispatch(toggleShowingComments(index));\r\n    };\r\n\r\n    const handleVote = newValue => {\r\n      if (newValue === voteValue) {\r\n          setVoteValue(0);\r\n      } else if (newValue === 1) {\r\n          setVoteValue(1);\r\n      } else {\r\n          setVoteValue(-1);\r\n      }\r\n    };\r\n\r\n    const renderUpvote = () => {\r\n      if (voteValue === 1) {\r\n          return <TiArrowUpThick className=\"icon-action\"></TiArrowUpThick>;\r\n      }\r\n      return <TiArrowUpOutline className=\"icon-action\"></TiArrowUpOutline>;\r\n    };\r\n\r\n    const renderDownvote = () => {\r\n      if (voteValue === -1) {\r\n          return <TiArrowDownThick className=\"icon-action\"></TiArrowDownThick>;\r\n      }\r\n      return <TiArrowDownOutline className=\"icon-action\"></TiArrowDownOutline>;\r\n    };\r\n\r\n    const getVoteType = () => {\r\n      if (voteValue === 1) {\r\n        return 'up-vote';\r\n      } else if (voteValue === -1) {\r\n        return 'down-vote';\r\n      }\r\n\r\n      return '';\r\n    };\r\n\r\n    const renderComments = () => {\r\n      if (showingComments) {\r\n        return (\r\n          <div>\r\n            <Comments permalink={post.permalink}></Comments>\r\n          </div>\r\n        );\r\n      }\r\n  \r\n      return null;\r\n    };\r\n\r\n    return (\r\n      <article key={post.id}>\r\n        <Card>\r\n          <div className=\"post-wrapper\">\r\n            <div className=\"post-votes-container\">\r\n              <button\r\n                type=\"button\"\r\n                className={`icon-action-button up-vote ${\r\n                  voteValue === 1 && 'active'\r\n                }`}\r\n                onClick={() => handleVote(1)}\r\n                aria-label=\"Up vote\"\r\n              >\r\n                {renderUpvote()}\r\n              </button>\r\n              <p className={`post-votes-value ${getVoteType()}`}>\r\n                {shortenNumber(post.ups, 1)}\r\n              </p>\r\n              <button\r\n                type=\"button\"\r\n                className={`icon-action-button down-vote ${\r\n                  voteValue === -1 && 'active'\r\n                }`}\r\n                onClick={() => handleVote(-1)}\r\n                aria-label=\"Down vote\"\r\n              >\r\n                {renderDownvote()}\r\n              </button>\r\n            </div>\r\n            <div className=\"post-container\">\r\n              <h3 className=\"post-title\">{post.title}</h3>\r\n  \r\n              <div className=\"post-image-container\">\r\n                <img src={post.url} alt=\"\" className=\"post-image\" />\r\n              </div>\r\n  \r\n              <div className=\"post-details\">\r\n                <span className=\"author-details\">\r\n                  <Avatar name={post.author} />\r\n                  <span className=\"author-username\">{post.author}</span>\r\n                </span>\r\n                <span>{moment.unix(post.created_utc).fromNow()}</span>\r\n                <span className=\"post-comments-container\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className={`icon-action-button ${\r\n                      showingComments && 'showing-comments'\r\n                    }`}\r\n                    onClick={() => onToggleComments(index)}\r\n                    aria-label=\"Show comments\"\r\n                  >\r\n                    <TiMessage className=\"icon-action\" />\r\n                  </button>\r\n                  {shortenNumber(post.num_comments, 1)}\r\n                </span>\r\n              </div>\r\n  \r\n              {renderComments()}\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </article>\r\n    );\r\n};\r\n\r\nexport default Post;","/**\r\n * Generates a number between min and max.\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\n\r\nconst getRandomNumber = (min, max) => {\r\n    return Math.floor(Math.random() * max) + min;\r\n};\r\n\r\nexport default getRandomNumber;","import React from 'react';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport './Post.css';\r\nimport './PostLoading.css';\r\nimport {TiArrowUpOutline, TiArrowDownOutline, TiMessage} from 'react-icons/ti';\r\nimport getRandomNumber from '../../utils/getRandomNumber';\r\n\r\nconst PostLoading = () => {\r\n  return (\r\n    <article className=\"post\">\r\n      <div className=\"post-votes-container\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"icon-action-button up-vote\"\r\n          aria-label=\"Up vote\"\r\n        >\r\n          <TiArrowUpOutline className=\"icon-action\" />\r\n        </button>\r\n        <Skeleton className=\"post-votes-value post-votes-value-loading\" />\r\n        <button\r\n          type=\"button\"\r\n          className=\"icon-action-button down-vote\"\r\n          aria-label=\"Down vote\"\r\n        >\r\n          <TiArrowDownOutline className=\"icon-action\" />\r\n        </button>\r\n      </div>\r\n      <div className=\"post-container\">\r\n        <h3 className=\"post-title\">\r\n          <Skeleton width={getRandomNumber(100, 200)} />\r\n        </h3>\r\n\r\n        <div className=\"post-image-container\">\r\n          <Skeleton height={250} />\r\n        </div>\r\n\r\n        <div className=\"post-details\">\r\n          <span>\r\n            <Skeleton width={getRandomNumber(20, 50)} />\r\n          </span>\r\n          <span>\r\n            <Skeleton width={getRandomNumber(50, 100)} />\r\n          </span>\r\n          <span className=\"post-comments-container\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"icon-action-button\"\r\n              aria-label=\"Show comments\"\r\n            >\r\n              <TiMessage className=\"icon-action\" />\r\n            </button>\r\n            <Skeleton width={getRandomNumber(10, 50)} />\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default PostLoading;","import {AnimatedList} from 'react-animated-list';\r\nimport React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {setPosts, selectCurrentSubreddit, selectSearchTerm} from '../../store/redditSlice.js';\r\nimport {useGetPostsQuery} from '../../api/redditAPI';\r\nimport Post from '../Post/Post';\r\nimport './Home.css';\r\nimport getRandomNumber from '../../utils/getRandomNumber';\r\nimport PostLoading from '../Post/PostLoading';\r\n \r\nconst Home = () => {\r\n    const reddit = useSelector(selectCurrentSubreddit);\r\n    const searchTerm = useSelector(selectSearchTerm);\r\n    const dispatch = useDispatch();\r\n\r\n    const {data, error, isLoading} = useGetPostsQuery(reddit);\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <AnimatedList animation=\"zoom\">\r\n              {Array(getRandomNumber(3, 10)).fill(<PostLoading />)}\r\n            </AnimatedList>\r\n        );\r\n    };\r\n\r\n    if (error) {\r\n        return (\r\n            <div className=\"error\">\r\n                <h2>Failed to load posts</h2>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    let filteredPosts = searchTerm !== '' ? data.filter(post => post.title.toLowerCase().includes(searchTerm.toLowerCase())) : data;\r\n\r\n    dispatch(setPosts(filteredPosts));\r\n\r\n    if (filteredPosts.length === 0) {\r\n        return (\r\n            <div className=\"error\">\r\n                <h2>No posts matching \"{searchTerm}\"</h2>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {filteredPosts.map((post, index) => (\r\n                <Post key={post.id} post={post} index={index}></Post>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import React, {useState, useEffect} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {selectSearchTerm, setSearchTerm} from '../../store/redditSlice';\r\nimport {IoLogoReddit} from 'react-icons/io';\r\nimport {GoSearch} from 'react-icons/go';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n    const [searchTermLocal, setSearchTermLocal] = useState('');\r\n    const searchTerm = useSelector(selectSearchTerm);\r\n    const dispatch = useDispatch();\r\n\r\n    const onSearchTermChange = ({target}) => {\r\n        setSearchTermLocal(target.value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setSearchTermLocal(searchTerm);\r\n    }, [searchTerm]);\r\n\r\n    const onSearchTermSubmit = (e) => {\r\n        e.preventDefault();\r\n        dispatch(setSearchTerm(searchTermLocal));\r\n    };\r\n\r\n\r\n    return (\r\n        <header>\r\n          <div className=\"logo\">\r\n            <IoLogoReddit className=\"logo-icon\"></IoLogoReddit>\r\n            <p>\r\n              Reddit<span>Mini</span>\r\n            </p>\r\n          </div>\r\n          <form className=\"search\" onSubmit={onSearchTermSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search\"\r\n              value={searchTermLocal}\r\n              onChange={onSearchTermChange}\r\n              aria-label=\"Search posts\"\r\n            />\r\n            <button type=\"submit\" onClick={onSearchTermSubmit} aria-label=\"Search\">\r\n              <GoSearch />\r\n            </button>\r\n          </form>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport Card from \"../../components/Card/Card\";\r\nimport {selectCurrentSubreddit, setCurrentSubreddit} from '../../store/redditSlice.js';\r\nimport {useGetSubredditsQuery} from '../../api/redditAPI';\r\nimport './Subreddits.css';\r\n\r\nconst Subreddits = () => {\r\n    const currentSubreddit = useSelector(selectCurrentSubreddit);\r\n    const dispatch = useDispatch();\r\n\r\n    const {data, error, isLoading} = useGetSubredditsQuery();\r\n\r\n    if (error) {\r\n        return <h2>Error, unable to fetch subreddits</h2>;\r\n    };\r\n\r\n    if (isLoading) {\r\n        return <h2>Loading subreddits...</h2>;\r\n    };\r\n\r\n    return (\r\n        <Card className=\"subreddit-card\">\r\n            <h2>Subreddits</h2>\r\n            <ul className=\"subreddits-list\">\r\n                {data.map(subreddit => (\r\n                    <li\r\n                    key={subreddit.id}\r\n                    className={`${currentSubreddit === subreddit.url && `selected-subreddit`}`}>\r\n                        <button\r\n                        type=\"button\"\r\n                        onClick={() => dispatch(setCurrentSubreddit(subreddit.url))}>\r\n                            <img\r\n                            src={subreddit.icon_img || `https://api.adorable.io/avatars/25/${subreddit.display_name}`}\r\n                            alt={`${subreddit.display_name}`}\r\n                            className=\"subreddit-icon\"\r\n                            style={{ border: `3px solid ${subreddit.primary_color}` }}\r\n                            ></img>\r\n                            {subreddit.display_name}\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Subreddits;","import React from 'react';\r\nimport './App.css';\r\nimport Home from './features/Home/Home';\r\nimport Header from './features/Header/Header';\r\nimport Subreddits from './features/Subreddits/Subreddits';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <header>\r\n      <Header></Header>\r\n      </header>\r\n      <main>\r\n        <Home></Home>\r\n      </main>\r\n      <aside>\r\n        <Subreddits></Subreddits>\r\n      </aside>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport {setupListeners} from '@reduxjs/toolkit/query';\r\nimport {redditApi} from '../api/redditAPI';\r\nimport redditReducer from './redditSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    [redditApi.reducerPath]: redditApi.reducer,\r\n    reddit: redditReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(redditApi.middleware)\r\n});\r\n\r\nsetupListeners(store.dispatch);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './store/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}